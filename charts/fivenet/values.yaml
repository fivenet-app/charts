# Default values for fivenet.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP

nodeSelector: {}

tolerations: []

affinity: {}

ingress:
  # -- If an ingress object should be created.
  enabled: true
  # -- Ingress class name
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    #nginx.ingress.kubernetes.io/ssl-redirect: "true"
    #nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    #nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
  hosts:
    - host: chart-example.local
      paths:
        - path: /api
          pathType: Prefix
          serviceName: fivenet-server
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

fivenet:
  # -- FiveNet config
  config:
    logLevel: "INFO"
    # debug or release
    mode: "release"
    tracing:
      enabled: false
      type: "stdout"
      # OTLP Tracing endpoint URL
      url: "https://localhost:4317"
      insecure: false
      timeout: 10s
      environment: "live"
      ratio: 0.1
      attributes: []
    http:
      listen: ":8080"
      adminListen: ":7070"
      sessions:
        cookieSecret: "your_generated_cookie_secret"
        domain: "localhost"
      publicURL: "https://fivenet.example.com"
      origins:
        - "https://fivenet.example.com"
        #- "http://localhost:3000" # Only for development
    database:
      # refer to https://github.com/go-sql-driver/mysql#dsn-data-source-name for details
      dsn: "DB_USER:DB_PASS@tcp(DB_HOST:DB_PORT)/DB_NAME?collation=utf8mb4_unicode_ci&parseTime=True&loc=Europe%2FBerlin"
      # For the local test database using `docker-compose`
      #dsn: "fivenet:changeme@tcp(localhost:3306)/fivenet?collation=utf8mb4_unicode_ci&parseTime=True&loc=Europe%2FBerlin"
      maxOpenConns: 32
      maxIdleConns: 5
      connMaxIdleTime: 15m
      connMaxLifetime: 60m
      custom:
        columns:
          user:
            visum: "visum"
            playtime: "playtime"
          vehicle:
            model: "model"
        conditions:
          user:
            filterEmptyName: false
    nats:
      # If you change the NATS username or password, below `nats:` config section
      url: "nats://localhost:4222"
    jwt:
      secret: "your_generated_jwt_secret"
    storage:
      type: "filesystem"
      filesystem:
        path: "/data"
      s3:
        endpoint: ""
        region: "us-east-1"
        accessKeyID: ""
        secretAccessKey: ""
        useSSL: true
        bucketName: ""
        prefix: ""
    imageProxy:
      enabled: true
      url: "/api/image_proxy/"
      cachePrefix: "images/"
      options:
        allowHosts: []
        denyHosts: []
    cache:
      refreshTime: 2m
    audit:
      retentionDays: 90
    oauth2:
      providers: []
        #- name: "discord"
        #  label: "Discord"
        #  homepage: "https://discord.com"
        #  icon: "i-simple-icons-discord" # or a URL to an image
        #  #defaultAvatar: ""
        #  type: "discord"
        #  redirectURL: "https://localhost:3000/api/oauth2/callback/discord"
        #  clientID: "your_discord_oauth2_client_id"
        #  clientSecret: "your_discord_oauth2_client_secret"
        #  scopes:
        #    - openid
        #    - identify
        #  endpoints:
        #    authURL: "https://discord.com/api/oauth2/authorize"
        #    tokenURL: "https://discord.com/api/oauth2/token"
    postalsFile: ".output/data/postals.json"
    auth:
      superuserGroups:
        - projektleiter
        - teamleitung
      superuserUsers: []
    dispatchCenter:
      convertJobs: []
        #- police
    discord:
      enabled: true
      token: "your_discord_bot_token"
      presence:
        gameStatus: "FiveNet"
        #listeningStatus: ""
        #streamingStatus: ""
        #streamingStatusUrl: ""
        #watchStatus: ""
      userInfoSync:
        enabled: false
        gradeRoleFormat: "[%grade%] %grade_label%"
        employeeRoleFormat: "%s Personal"
        nicknameRegex: |-
          ^(?P<prefix>\[\S+][ ]*)?(?P<name>[^\[]+)(?P<suffix>[ ]*\[\S+])?
        jobsAbsceneRoleName: "Absent"
      groupSync:
        enabled: false
        mapping: {}
          #fraktionsverwaltung:
          #  roleName: "Fraktionsverwaltung"
          #  permissions: 414690258631
          #  color: "#9B59B6"
          #  notSameJob: true
          #teamleitung:
          #  roleName: "Teamleitung"
          #  permissions: 416032435935
          #  color: "#9B59B6"
      commands:
        enabled: true

server:
  enabled: true
  replicaCount: 1
  revisionHistoryLimit: 1
  image:
    repository: ghcr.io/fivenet-app/fivenet
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  livenessProbe:
    httpGet:
      path: /readiness
      port: metrics
    failureThreshold: 3
    initialDelaySeconds: 25
    periodSeconds: 10
  readinessProbe: null
  startupProbe:
    httpGet:
      path: /readiness
      port: metrics
    failureThreshold: 30
    initialDelaySeconds: 20
    periodSeconds: 10
  additionalEnv: []
  serviceMonitor:
    # -- Specifies whether a prometheus-operator ServiceMonitor should be created
    enabled: false
    # -- Additional Labels for the ServiceMonitor object
    additionalLabels: {}
    #namespace: "monitoring"
    namespaceSelector:
    # Default: scrape .Release.Namespace only
    # To scrape all, use the following:
    #  matchNames:
    #    - monitoring
    #   any: true
    # -- (duration) Interval at which metrics should be scraped
    scrapeInterval: 30s
    # honorLabels: true

# -- Iconify helm chart options, please see https://github.com/fivenet-app/charts/tree/main/charts/iconify for more information
iconify:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      # If you use a different ingress controller you must adjust this annotation
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    hosts:
      - host: chart-example.local
        paths:
          - path: /api/icons(/|$)(.*)
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

# -- FiveNet Worker deployment config
worker:
  enabled: true
  replicaCount: 1
  revisionHistoryLimit: 1
  image:
    repository: ghcr.io/fivenet-app/fivenet
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  livenessProbe:
    httpGet:
      path: /readiness
      port: metrics
    initialDelaySeconds: 15
    periodSeconds: 10
  readinessProbe: null
  startupProbe:
    httpGet:
      path: /readiness
      port: metrics
    initialDelaySeconds: 5
    failureThreshold: 20
    periodSeconds: 10
  additionalEnv: []
  serviceMonitor:
    # -- Specifies whether a prometheus-operator ServiceMonitor should be created
    enabled: false
    # -- Additional Labels for the ServiceMonitor object
    additionalLabels: {}
    #namespace: "monitoring"
    namespaceSelector:
    # Default: scrape .Release.Namespace only
    # To scrape all, use the following:
    #  matchNames:
    #    - monitoring
    #   any: true
    # -- (duration) Interval at which metrics should be scraped
    scrapeInterval: 30s
    # honorLabels: true

# -- FiveNet Discord Bot deployment config
discord:
  enabled: true
  replicaCount: 1
  revisionHistoryLimit: 1
  image:
    repository: ghcr.io/fivenet-app/fivenet
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  livenessProbe:
    httpGet:
      path: /readiness
      port: metrics
    initialDelaySeconds: 15
    periodSeconds: 10
  readinessProbe: null
  startupProbe:
    httpGet:
      path: /readiness
      port: metrics
    initialDelaySeconds: 5
    failureThreshold: 20
    periodSeconds: 10
  additionalEnv: []
  serviceMonitor:
    # -- Specifies whether a prometheus-operator ServiceMonitor should be created
    enabled: false
    # -- Additional Labels for the ServiceMonitor object
    additionalLabels: {}
    #namespace: "monitoring"
    namespaceSelector:
    # Default: scrape .Release.Namespace only
    # To scrape all, use the following:
    #  matchNames:
    #    - monitoring
    #   any: true
    # -- (duration) Interval at which metrics should be scraped
    scrapeInterval: 30s
    # honorLabels: true

# -- NATS server/cluster config values: https://artifacthub.io/packages/helm/nats/nats#values
nats:
  enabled: true # if disabled you must run your own Nats server or cluster
  config:
    cluster:
      enabled: true
      replicas: 3
    jetstream:
      enabled: true
      fileStore:
        enabled: true
        pvc:
          enabled: true
          size: 5Gi
          #storageClassName: default
      memoryStore:
        enabled: true
        # ensure that container has a sufficient memory limit greater than maxSize
        maxSize: 64Mi

    merge:
      accounts:
        fivenet:
          jetstream: enabled
          users:
            # You should change the username and password
            - user: "fivenet"
              password: "fivenet"
      # User tracker can create big update events
      max_payload: 3145728

  promExporter:
    enabled: true
    image:
      repository: docker.io/natsio/prometheus-nats-exporter
      tag: 0.15.0

    patch:
      - op: replace
        path: /args
        value:
          - -port=7777
          - -channelz
          - -connz
          - -routez
          - -subz
          - -varz
          - -prefix=nats
          - -serverz
          - -use_internal_server_id
          - -jsz=streams
          - -ri=15
          - http://localhost:8222/

    podMonitor:
      enabled: false # enable only if your have the prometheus-operator deployed
      patch:
        - op: add
          path: /spec/podMetricsEndpoints/0/interval
          value: 30s

# -- Extra objects to deploy (value evaluated as a template)
extraObjects: []
